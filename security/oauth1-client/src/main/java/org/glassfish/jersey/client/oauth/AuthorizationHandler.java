/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * http://glassfish.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package org.glassfish.jersey.client.oauth;

import java.net.URI;

/**
 *  Implementation of this interface should be passed to the filter constructor
 * to handle user authorization requests and respond to obtaining a new access token
 * (e.g. by storing it for future use).
 *
 * @author Paul C. Bryan <pbryan@sun.com>
 * @author Martin Matula <martin.matula@oracle.com>
 */
public interface AuthorizationHandler {
    /** Method called by the filter when an authorization of a request token is
     * needed. Implementation should redirect user to the authorization URI passed
     * as the parameter to this method and return the verification code (or null)
     * generated by the server in a response to user authorization.
     *
     * @param authorizationUri Authorization URI the user should be redirected to.
     * @return verifier code that was generated by the server, null if the user refused to authorize
     * the client.
     */
    String authorize(URI authorizationUri);

    /** Notifies the handler that the application was authorized by the user
     * and a new access token was obtained. Application may want to store this
     * for future use (to avoid the need for a new authorization next time it runs).
     *
     * @param token The new access token.
     * @param tokenSecret Secret corresponding to the new access token.
     */
    void authorized(String token, String tokenSecret);
}
